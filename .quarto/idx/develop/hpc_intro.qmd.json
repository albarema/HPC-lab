{"title":"HPC intro","markdown":{"yaml":{"title":"HPC intro","format":"html","date-modified":"last-modified","date-format":"long","summary":"This is a summary"},"headingText":"Basics of High-Performance Computing (HPCs)","containsRefs":false,"markdown":"\n\n:::{.callout-note title=\"Course Overview\"}\n- ‚è∞ **Total Time Estimation:** 3 hours  \n- üìÅ **Supporting Materials:**  \n- üë®‚Äçüíª **Target Audience:** Ph.D., MSc, anyone interested in HPC systems.\n- üë©‚Äçüéì **Level:** Advanced.\n- üîí **License:** [Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.](https://creativecommons.org/licenses/by-sa/4.0/legalcode)  \n- üí∞ **Funding:** This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).\n:::\n\n:::{.callout-tip title=\"Module Topics\"}\n- HPC systems and HPC architecture  \n- National HPC platforms\n- Setting up HPC environments (software requirements, job scheduling, resource management)\n- Data management and optimization \n- Programming and parallel computing \n- Jobs on HPC clusters (submissions, benchmarking, debugging and monitoring)\n- Advanced topics\n:::\n\n\nHigh-Performance Computing (HPC) involves connecting a large number of computing hardware components to execute many operations simultaneously. A supercomputer consists of various hardware types, typically organized in this hierarchy:\n\n- **CPU**: The unit that executes a sequence of instructions. A CPU may contain multiple cores, allowing independent execution of several instruction chains.\n- **Node**: A single computer within an HPC system.\n- **Cluster**: A group of interconnected nodes that communicate and can work together on a single task.\n\nHPC systems also have a dedicated storage component connected to one or more types of storage hardware, typically referred to as a parallel file system or distributed storage system. \n\nA **node** can consist of one or multiple CPUs and RAM memory. The **RAM** (Random Access Memory) serves as temporary storage that helps manage the data required for running tasks quickly but does not perform computations or persist data after the system shuts down. There are other types of nodes containing different hardware combinations. The most common hardware that can be found in a node beyond RAM and CPUs is:\n\n- **GPU**: A graphics processing unit, originally designed for gaming and graphic software, but now used for its computational power. It is particularly efficient in executing repetitive linear algebra operations across multiple parallel processes. Nvidia and AMD are the primary GPU manufacturers.\n- **FPGA**: A programmable hardware component capable of accelerating specific operations far faster than a CPU. It is often used to optimize processes traditionally handled by CPUs.\n\nSchematic of components of an HPC [IMAGE]\n\n### Nodes \nThere are two types of nodes on a cluster:\n\n- login nodes (also known as head or submit nodes).\n- compute nodes (also known as worker nodes).\n\n### Job scheduler  \n\n:::{.callout-note}\nSeveral job scheduler programs are available, and `SLURM` is among the most widely used. In the next section, we'll explore SLURM in greater detail, along with general best practices for running jobs.\n:::\n\n### Filesystem \n\nThe filesystem consists of all the directories and files accessible to a given process.\n\n- Scratch \n- Users working space \n\n:::{.callout-exercise}\nI have an omics pipeline that produces a large number of files, resulting in a couple of terabytes of data after processing and analysis. The project will continue for a few more years, and I've decided to store the data in the scratch folder. Do you agree with this decision, and why? What factors should be considered when deciding which data to retain and where to store it?\n\n:::{.callout-hint}\nTypically, scratch storage is not backed up, so it's not advisable to rely on it for important data. At a minimum, ensure you back up the raw data and the scripts used for processing. This way, if some processed files are lost, you can replicate the analyses.\n\nWhen deciding which data to keep on the HPC, back up, or delete, consider the following:\n\n- Processing Time: Evaluate how long each step of the analysis takes to run. There may be significant computational costs associated with re-running heavy data processing steps.\n- Storage Management: Use tools like Snakemake to manage intermediate files. You can configure Snakemake to automatically delete intermediate files once the final results are produced, helping you manage storage more efficiently.\n:::\n:::\n\n### Kernel \n\nThe kernel is essential for managing multiple programs on your machine, each of which runs as a process. Even if you write code assuming full control over the CPU and memory, the kernel ensures that multiple processes can run simultaneously without interfering with each other. It does this by scheduling time for each process and translating virtual memory addresses into physical ones, ensuring security and preventing conflicts.\n\nThe kernel also ensures that processes can't access each other's memory or directly modify the hard drive, maintaining system security and stability. For example, when a process needs to write to a file, it asks the kernel to do so through a system call, rather than writing directly.\n\nIn conclusion, it plays a crucial role in managing the CPU, memory, disk, and software environment. By mediating access to these resources, it maintains process isolation, security, and the smooth operation of your system.\n\n:::{.callout-note}\n# Kernel primary roles: \n- Interfaces with hardware to facilitate program operations\n- Manages and schedules the execution of processes\n- Regulates and allocates system resources among processes\n:::\n\n### Before start using an HPC\n\nHigh-Performance Computing (HPC) systems might be organized differently, but there is typically an HPC administration team you can contact to understand how your specific HPC is structured. Key information you should seek from them includes:\n\n- The types of compute nodes available.\n- The storage options you can access and the amount allocated per user.\n- Whether a job scheduler software is in use, and if so, which one. You can also request a sample submission script to help you get started.\n- The policy on who bears the cost of using the HPC resources.\n- Whether you can install your own software and create custom environments.\n\n:::{.callout-tip title=\"Be *nice*\"}\nIf your HPC system doesn't have a job scheduler in place, we recommend using the [nice command](https://man7.org/linux/man-pages/man2/nice.2.html). This command allows you to adjust and **manage the scheduling priority of your processes**, giving you the ability to run tasks with lower priority when sharing resources with others. By using nice, you can ensure that your processes do not dominate the CPU, allowing other users' tasks to run smoothly. This is particularly useful in environments where multiple users are working on the same system without a job scheduler to automatically manage resource allocation.\n:::\n\n:::{.callout-exercise}\n# Exercise 1: General HPC\n1. Describe how a typical HPC is organised: nodes, job scheduler and filesystem. \n2. What are the roles of a login node and a compute node? how do they differ?\n3. Describe the role of a job scheduler\n4. What are the differences between *scratch* and *home* storage and when each should be used? \n5. What is a kernel? \n:::\n\n### Key areas of HPC use\n\n- Quantum mechanics\n- Complex physical simulations (CFD)\n- Weather forecasting\n- Molecular modeling\n- Machine learning with big data\n- Bioinformatics\n\n### Academic applications \n\nHPC systems offer immense computational power, but they are not limited to large-scale projects. You can request anything from a single CPU and some RAM to entire nodes. Danish HPC systems are available for various academic purposes, including:\n\n- Research projects: access to computing power \n- Collaboration: Easier data and settings sharing for collaborative projects. \n- Student exercises in classroom teaching: Pre-installed software or package management, saving time on configuration, especially in teaching environments where students may face issues with different operating systems or software versions.\n- Student projects: students are not authorized to request resources independently. It is the responsibility of the lecturer or professor to obtain resources through the front office or facilitator. Once resources are allocated, students can be invited to access the project.\n\nThe Danish HPC ecosystem emphasizes teaching and training new users, so applications for resources related to courses and student projects are strongly encouraged. As a reminder, students cannot request resources themselves. Professors or lecturers are responsible for obtaining resources through the front office, and students can be granted access to the allocated project.\n\n**Here is an overview of the different Danish HPC systems**\n\n| Feature                | Computerome             | GenomeDK                | UCloud                | Gefion                  | LUMI                  |\n|------------------------|-------------------------|-------------------------|-----------------------|-------------------------|-----------------------|\n| **CPU Nodes**          | 692 thin / 55 fat (50k cores) | 52 thin / 60 fat (15k cores) | 6592 vCPUs            | 382 / 112 core each     | 2048 / 128 core each  |\n| **GPU Nodes**          | 40 NVIDIA V100s        | 2 NVIDIA L40S          | 16 NVIDIA H100s       | 191 NVIDIA DGX / 8 H100s | 2978 / 4 AMD M250x    |\n| **Storage**            | 50 PB                   | 23 PB                   | 3 PB                  | ? Provided by DDN       | ~120 PB               |\n| **Security**           | ISAE 3000 + ISO 27001  | ISAE 3000 + ISO 27001  | ISO 27001             | NA                      | ISAE 3000 + ISO 27001 |\n| **Sandbox**            | No                      | No                      | Yes (1000 core-hours) | Application based        | Application based      |\n| **Sensitive Data**     | Yes, private clouds     | Yes, ‚Äòclosed zones‚Äô     | Yes                   | Not yet                 | Not yet               |\n| **Env Management**     | Conda (& Docker?)       | Singularity/Apptainer   | Conda                 | NA                      | Singularity/Apptainer  |\n| **OS**                 | CentOS 7                | AlmaLinux 8             | UCloud GUI            | ? NVIDIA Enterprise      | SUSE LES 15 / CRAY    |\n\n\n\n## HPC access\n\nHPC systems allow multiple users to log in simultaneously and utilize a portion of the system's resources, usually allocated by an administrator. Exceeding these assigned resources will terminate the running software. In Denmark, there are two ways to access an HPC:\n\n- **Interactive Interface**: You can log in using a user-friendly interface ([UCloud Supercomputer](https://cloud.sdu.dk/) and [Documentation](https://docs.cloud.sdu.dk/)).\n- **Command Line Interface**: Requires knowledge of the UNIX shell language ([here a good introduction the command-line](https://www.learnenough.com/command-line-tutorial/basics)).\n\nTypically, users first access a login node, which has limited computational resources and is used for tasks like file management and small-scale code testing. Users may be assigned:\n\n- A certain number of CPUs (and possibly GPUs or FPGAs)\n- A specific amount of RAM\n- Storage capacity\n- An amount of total time for using these resources\n\nWe recommend to directly contact the local front office to discuss resource availability. \n\n:::{.callout-tip title=\"What can I run from a login node\"}\nA straightforward rule: do not run anything on the login node to prevent potential problems. If the login node crashes, the entire system may need to be rebooted, affecting everyone. Remember, you're not the only one using the HPC‚Äîso be considerate of others. For easy, quick tasks, request an interactive access to one of the compute nodes. \n\nIn principle, the only activities you should perform on the login node include:\n\n- Your active login session.\n- [OPTIONAL] A terminal multiplexer, such as TMUX, SCREEN, or similar.\n- Submitting jobs to the queueing system, whether regular or interactive.\n:::\n\n\n## Sources\n\nUseful links \n\n#### Acknowledgements\n","srcMarkdownNoYaml":"\n\n:::{.callout-note title=\"Course Overview\"}\n- ‚è∞ **Total Time Estimation:** 3 hours  \n- üìÅ **Supporting Materials:**  \n- üë®‚Äçüíª **Target Audience:** Ph.D., MSc, anyone interested in HPC systems.\n- üë©‚Äçüéì **Level:** Advanced.\n- üîí **License:** [Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.](https://creativecommons.org/licenses/by-sa/4.0/legalcode)  \n- üí∞ **Funding:** This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).\n:::\n\n:::{.callout-tip title=\"Module Topics\"}\n- HPC systems and HPC architecture  \n- National HPC platforms\n- Setting up HPC environments (software requirements, job scheduling, resource management)\n- Data management and optimization \n- Programming and parallel computing \n- Jobs on HPC clusters (submissions, benchmarking, debugging and monitoring)\n- Advanced topics\n:::\n\n## Basics of High-Performance Computing (HPCs)\n\nHigh-Performance Computing (HPC) involves connecting a large number of computing hardware components to execute many operations simultaneously. A supercomputer consists of various hardware types, typically organized in this hierarchy:\n\n- **CPU**: The unit that executes a sequence of instructions. A CPU may contain multiple cores, allowing independent execution of several instruction chains.\n- **Node**: A single computer within an HPC system.\n- **Cluster**: A group of interconnected nodes that communicate and can work together on a single task.\n\nHPC systems also have a dedicated storage component connected to one or more types of storage hardware, typically referred to as a parallel file system or distributed storage system. \n\nA **node** can consist of one or multiple CPUs and RAM memory. The **RAM** (Random Access Memory) serves as temporary storage that helps manage the data required for running tasks quickly but does not perform computations or persist data after the system shuts down. There are other types of nodes containing different hardware combinations. The most common hardware that can be found in a node beyond RAM and CPUs is:\n\n- **GPU**: A graphics processing unit, originally designed for gaming and graphic software, but now used for its computational power. It is particularly efficient in executing repetitive linear algebra operations across multiple parallel processes. Nvidia and AMD are the primary GPU manufacturers.\n- **FPGA**: A programmable hardware component capable of accelerating specific operations far faster than a CPU. It is often used to optimize processes traditionally handled by CPUs.\n\nSchematic of components of an HPC [IMAGE]\n\n### Nodes \nThere are two types of nodes on a cluster:\n\n- login nodes (also known as head or submit nodes).\n- compute nodes (also known as worker nodes).\n\n### Job scheduler  \n\n:::{.callout-note}\nSeveral job scheduler programs are available, and `SLURM` is among the most widely used. In the next section, we'll explore SLURM in greater detail, along with general best practices for running jobs.\n:::\n\n### Filesystem \n\nThe filesystem consists of all the directories and files accessible to a given process.\n\n- Scratch \n- Users working space \n\n:::{.callout-exercise}\nI have an omics pipeline that produces a large number of files, resulting in a couple of terabytes of data after processing and analysis. The project will continue for a few more years, and I've decided to store the data in the scratch folder. Do you agree with this decision, and why? What factors should be considered when deciding which data to retain and where to store it?\n\n:::{.callout-hint}\nTypically, scratch storage is not backed up, so it's not advisable to rely on it for important data. At a minimum, ensure you back up the raw data and the scripts used for processing. This way, if some processed files are lost, you can replicate the analyses.\n\nWhen deciding which data to keep on the HPC, back up, or delete, consider the following:\n\n- Processing Time: Evaluate how long each step of the analysis takes to run. There may be significant computational costs associated with re-running heavy data processing steps.\n- Storage Management: Use tools like Snakemake to manage intermediate files. You can configure Snakemake to automatically delete intermediate files once the final results are produced, helping you manage storage more efficiently.\n:::\n:::\n\n### Kernel \n\nThe kernel is essential for managing multiple programs on your machine, each of which runs as a process. Even if you write code assuming full control over the CPU and memory, the kernel ensures that multiple processes can run simultaneously without interfering with each other. It does this by scheduling time for each process and translating virtual memory addresses into physical ones, ensuring security and preventing conflicts.\n\nThe kernel also ensures that processes can't access each other's memory or directly modify the hard drive, maintaining system security and stability. For example, when a process needs to write to a file, it asks the kernel to do so through a system call, rather than writing directly.\n\nIn conclusion, it plays a crucial role in managing the CPU, memory, disk, and software environment. By mediating access to these resources, it maintains process isolation, security, and the smooth operation of your system.\n\n:::{.callout-note}\n# Kernel primary roles: \n- Interfaces with hardware to facilitate program operations\n- Manages and schedules the execution of processes\n- Regulates and allocates system resources among processes\n:::\n\n### Before start using an HPC\n\nHigh-Performance Computing (HPC) systems might be organized differently, but there is typically an HPC administration team you can contact to understand how your specific HPC is structured. Key information you should seek from them includes:\n\n- The types of compute nodes available.\n- The storage options you can access and the amount allocated per user.\n- Whether a job scheduler software is in use, and if so, which one. You can also request a sample submission script to help you get started.\n- The policy on who bears the cost of using the HPC resources.\n- Whether you can install your own software and create custom environments.\n\n:::{.callout-tip title=\"Be *nice*\"}\nIf your HPC system doesn't have a job scheduler in place, we recommend using the [nice command](https://man7.org/linux/man-pages/man2/nice.2.html). This command allows you to adjust and **manage the scheduling priority of your processes**, giving you the ability to run tasks with lower priority when sharing resources with others. By using nice, you can ensure that your processes do not dominate the CPU, allowing other users' tasks to run smoothly. This is particularly useful in environments where multiple users are working on the same system without a job scheduler to automatically manage resource allocation.\n:::\n\n:::{.callout-exercise}\n# Exercise 1: General HPC\n1. Describe how a typical HPC is organised: nodes, job scheduler and filesystem. \n2. What are the roles of a login node and a compute node? how do they differ?\n3. Describe the role of a job scheduler\n4. What are the differences between *scratch* and *home* storage and when each should be used? \n5. What is a kernel? \n:::\n\n### Key areas of HPC use\n\n- Quantum mechanics\n- Complex physical simulations (CFD)\n- Weather forecasting\n- Molecular modeling\n- Machine learning with big data\n- Bioinformatics\n\n### Academic applications \n\nHPC systems offer immense computational power, but they are not limited to large-scale projects. You can request anything from a single CPU and some RAM to entire nodes. Danish HPC systems are available for various academic purposes, including:\n\n- Research projects: access to computing power \n- Collaboration: Easier data and settings sharing for collaborative projects. \n- Student exercises in classroom teaching: Pre-installed software or package management, saving time on configuration, especially in teaching environments where students may face issues with different operating systems or software versions.\n- Student projects: students are not authorized to request resources independently. It is the responsibility of the lecturer or professor to obtain resources through the front office or facilitator. Once resources are allocated, students can be invited to access the project.\n\nThe Danish HPC ecosystem emphasizes teaching and training new users, so applications for resources related to courses and student projects are strongly encouraged. As a reminder, students cannot request resources themselves. Professors or lecturers are responsible for obtaining resources through the front office, and students can be granted access to the allocated project.\n\n**Here is an overview of the different Danish HPC systems**\n\n| Feature                | Computerome             | GenomeDK                | UCloud                | Gefion                  | LUMI                  |\n|------------------------|-------------------------|-------------------------|-----------------------|-------------------------|-----------------------|\n| **CPU Nodes**          | 692 thin / 55 fat (50k cores) | 52 thin / 60 fat (15k cores) | 6592 vCPUs            | 382 / 112 core each     | 2048 / 128 core each  |\n| **GPU Nodes**          | 40 NVIDIA V100s        | 2 NVIDIA L40S          | 16 NVIDIA H100s       | 191 NVIDIA DGX / 8 H100s | 2978 / 4 AMD M250x    |\n| **Storage**            | 50 PB                   | 23 PB                   | 3 PB                  | ? Provided by DDN       | ~120 PB               |\n| **Security**           | ISAE 3000 + ISO 27001  | ISAE 3000 + ISO 27001  | ISO 27001             | NA                      | ISAE 3000 + ISO 27001 |\n| **Sandbox**            | No                      | No                      | Yes (1000 core-hours) | Application based        | Application based      |\n| **Sensitive Data**     | Yes, private clouds     | Yes, ‚Äòclosed zones‚Äô     | Yes                   | Not yet                 | Not yet               |\n| **Env Management**     | Conda (& Docker?)       | Singularity/Apptainer   | Conda                 | NA                      | Singularity/Apptainer  |\n| **OS**                 | CentOS 7                | AlmaLinux 8             | UCloud GUI            | ? NVIDIA Enterprise      | SUSE LES 15 / CRAY    |\n\n\n\n## HPC access\n\nHPC systems allow multiple users to log in simultaneously and utilize a portion of the system's resources, usually allocated by an administrator. Exceeding these assigned resources will terminate the running software. In Denmark, there are two ways to access an HPC:\n\n- **Interactive Interface**: You can log in using a user-friendly interface ([UCloud Supercomputer](https://cloud.sdu.dk/) and [Documentation](https://docs.cloud.sdu.dk/)).\n- **Command Line Interface**: Requires knowledge of the UNIX shell language ([here a good introduction the command-line](https://www.learnenough.com/command-line-tutorial/basics)).\n\nTypically, users first access a login node, which has limited computational resources and is used for tasks like file management and small-scale code testing. Users may be assigned:\n\n- A certain number of CPUs (and possibly GPUs or FPGAs)\n- A specific amount of RAM\n- Storage capacity\n- An amount of total time for using these resources\n\nWe recommend to directly contact the local front office to discuss resource availability. \n\n:::{.callout-tip title=\"What can I run from a login node\"}\nA straightforward rule: do not run anything on the login node to prevent potential problems. If the login node crashes, the entire system may need to be rebooted, affecting everyone. Remember, you're not the only one using the HPC‚Äîso be considerate of others. For easy, quick tasks, request an interactive access to one of the compute nodes. \n\nIn principle, the only activities you should perform on the login node include:\n\n- Your active login session.\n- [OPTIONAL] A terminal multiplexer, such as TMUX, SCREEN, or similar.\n- Submitting jobs to the queueing system, whether regular or interactive.\n:::\n\n\n## Sources\n\nUseful links \n\n#### Acknowledgements\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../css/custom-callout.lua"],"toc":true,"css":["../include/webex.css"],"include-after-body":["../include/webex.js"],"output-file":"hpc_intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","copyright":"CC-BY-SA 4.0 license","theme":{"light":["materia","../css/materialight.scss"],"dark":"darkly"},"title":"HPC intro","date-modified":"last-modified","date-format":"long","summary":"This is a summary"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}