{"title":"FAIR environments","markdown":{"yaml":{"format":{"html":{"toc":false}},"date-modified":"last-modified","summary":"workflow"},"headingText":"FAIR environments","containsRefs":false,"markdown":"\n\n\nRecording and sharing the computational environment is essential for reproducibility and transparency. There are several methods to achieve this, but we are going to focus on two of them, mamba (an environment manager) and Docker (a container). Environment managers are user-friendly, easy to share across different systems, and offer lightweight, efficient, and fast start-up times. However, Docker containers provide complete environment isolation (including the operating system), which ensures consistent behavior across various systems.\n\nEach computer or HPC (High-Performance Computing) platform has a unique computational environment that includes its operating system, installed software, versions of software packages, and other features. If a research project is moved to a different computer or platform, the analysis might not run or produce consistent results if it depends on any of these factors.\n\nFor research to be reproducible, the original computational environment must be recorded so others can replicate it. There are several methods to achieve this: \n\n- **Containerization platforms** (e.g., Docker, Singularity): allow the researcher to package their software and dependencies into a standardized container image.\n- **Virtual Machines** (e.g., VirtualBox): can share an entire virtualized computing environment (OS, software and dependencies)\n- **Environment managers**: provide an isolated environment with specific packages and dependencies that can be installed without affecting the system-wide configuration. These environments are particularly useful for managing conflicting dependencies and ensuring reproducibility. Configuration files can automate the setup of the computational environment: \n  - conda or mamba: allows users to export environment specifications (software and dependencies) to YAML files enabling easy recreation of the environment on another system\n  - Python `virtualenv` or `pipenv`: is a tool for creating isolated environments to manage dependencies specific to a project\n  - requirements.txt: may contain commands for installing packages (such as pip for Python packages or apt-get for system-level dependencies), configuring system settings, and setting environment variables. Package managers can be used to install, upgrade and manage packages. \n  - R's `renv`: The 'renv' package creates isolated environments in R.\n- **Environment descriptors**\n  - `sessionInfo()` or `devtools::session_info()`: In R, these functions provide detailed information about the current session\n  - `sessionInfo()`, similarly, in Python. Libraries like NumPy and Pandas have `show_versions()` methods to display package versions.\n\nWhile environment managers are very easy to use and share across different systems, and are lightweight and efficient, offering fast start-up times, Docker containers provide a full env isolation (including the operating system) which ensures consistent behavior across different systems. Check the table below for a full overview. \n\n![](./images/envs.png)\n\n### Package manager \n\n[Mamba](https://mamba.readthedocs.io/en/latest/) is a reimplementation of the Conda package manager in C++. While our focus will be on Mamba, it's important to note that it maintains compatibility with Conda by using the same command-line parser, package installation and uninstallation code, and transaction verification routines.\n\nMamba uses software installation specifications that are maintained by extensive communities of developers, organized into channels, which serve as software repositories. For example, the “bioconda” channel specializes in bioinformatics tools, while “conda-forge” covers a broad range of data science packages.\n\n:::{.callout-tip title=\"Mamba vs. conda\"}\nAs previously mentioned, mamba is a newer and faster implementation. The two commands can be used interchangeable (for most tasks). If you use Conda, you should still complete the exercises, as you'll gain experience with both tools. For more information on their ecosystem and advantages [here](https://medium.com/@QuantStack/open-software-packaging-for-science-61cecee7fc23). \n:::\n\nMamba allows you to create mutluple software envrinoments, where mutluple pacjage version can co-ecit on your system. \n\n:::{.callout-exercise}\n# Build your mamba environment\nFollow [mamba instructions](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html) to install it. Let's also include `bioconda` and `conda-forge` channels which will come very handy. \n\n```{.bash .code-overflow-wrap}\nconda config --add channels defaults; conda config --add channels bioconda; conda config --add channels conda-forge\n```\nNow you are set to create your first environment. Follow these steps:\n\n1. Create a new environment named myenv\n2. Install the following packages in `myenv`: `bowtie2`, `numpy=1.26.4`, `matplotlib=3.8.3`\n3. Check the environments available \n4. Load/activate the environment\n5. Check which `python` executable is being used and that bowtie2 is installed. \n\n:::{.callout-hint}\nHere are some of the commands you need for the exercise. \n\n```{.bash}\nmamba create <ENV-NAME>\nmamba install --channel <CHANNEL-NAME> --name <ENV-NAME>\nmamba env list\nmamba activate <ENV-NAME>\n```\n:::\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\n\n1. The syntax to create a new environment is: `mamba create --name myenv`\n2. Example “bowtie2”: Go to anaconda.org and search for “bowtie2” to confirm it is available through Mamba and which software channel it is provided from. You will find that it is available via the “bioconda” channel: https://anaconda.org/bioconda/bowtie2. The syntax to install packages is: `mamba install --channel <CHANNEL-NAME> --name <ENV-NAME> <SOFTWARE-NAME>`\n\n`mamba install --name myenv --channel bioconda bowtie2=2.5.3 \"matplotlib=3.8.3\" \"numpy=1.26.4\"` \n\nDo the same with the others. \n3. To see al environments available `mamba env list`. There will be a \"*\" showi8ng the one is activated. \n4. Load the environment `mamba activate myenv`. \n5. `which python` -> should print the one in the environment that is active (path similar to `/home/mambaforge/envs/myenv/bin/python`). `bowtie2 --help`\n:::\n:::\n\n\n:::{.callout-important}\n# Loading mamba environments in shell scripts\nIf you need to activate an environment in a shell script that will be submitted to SLURM, you must first source Mamba's configuration file. For instance, to load the `myenv` environment we created, the script would include the following code:\n\n```{.bash}\n# Always add these two commands to your scripts\neval \"$(conda shell.bash hook)\"\nsource $CONDA_PREFIX/etc/profile.d/mamba.sh\n\n# then you can activate the environment\nmamba activate myenv\n```\n\nWhen jobs are submitted to SLURM, they run in a non-interactive shell where Mamba isn't automatically set up. By running the `source` command, you ensure that Mamba's activate function is available. It's important to remember that even if the environment is loaded on the login node, the scripts will execute on a different machine (one of the compute nodes). Therefore, always include the command to load the Mamba environment in your SLURM submission scripts.\n:::\n\n### Containers\n\nEssentially, a container is a self-contained, lightweight package that includes everything needed to run a specific application—such as the operating system, libraries, and the application code itself. Containers operate independently of the host system, which allows them to run the same software across various environments without any conflicts or interference. This isolation ensures that researchers can consistently execute their code on different systems and platforms, without worrying about dependency issues or conflicts with other software on the host machine.\n \n:::{.callout-note title=\"Docker vs. Singularity\"}\nThe most significant difference is at the permission level required to run them. Docker containers operate as root by default, giving them full access to the host system. While this can be useful in certain situations, it also poses security risks, especially in multi-user environments. In contrast, Singularity containers run as non-root users by default, enhancing security and preventing unauthorized access to the host system. \n\n- Docker is ideal for building and distributing software across different operating systems\n- Singularity is designed for HPC environments and offers high performance without needing root access\n:::\n\n#### Docker\n\nDocker helps developers build, share, run, and verify applications anywhere — without tedious environment configuration or management.\n\n#### Singularity on a remote server\n\nWhile you can build your own Singularity images, many popular software packages already have pre-built images available from public repositories. The two repositories you’ll most likely use or hear about are:  \n\n- [depot.galaxyproject.org](https://depot.galaxyproject.org/singularity/)\n- [Sylabs](https://cloud.sylabs.io/)\n\n\n:::{.callout-tip}\n- We recommend using the pre-installed version provided by your system administrators if you're working on a shared system. If you're working on your own computer, you can install the necessary software using Mamba.\n- They might host different versions of the same software, so it's worth checking both to find the version you need.\n- To download a software container from public repositories, use the `singularity pull` command.\n- To execute a command within the software container, use the `singularity run` command.\n- Good practice: create a directory to save all singularity images together. `.sif` is the standard extension for the images. \n:::\n\n:::{.callout-exercise}\nDownload a singularity image from one of the two repositories listed above (choose a software like bcftools, bedtools, bowtie2, seqkit...) and run the `--help` command. This command displays the help documentation of the program, verifying that our image is functioning correctly and includes the intended software.\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\n\n```{.bash .code-overflow-wrap}\n# create a directory for our singularity images\nmkdir images\n\n# download the image\nsingularity pull images/bowtie2-2.5.4.sif https://depot.galaxyproject.org/singularity/bowtie2%3A2.5.4--he20e202_2\n\n# run the image: singularity run <PATH-TO-IMAGE> <YOUR COMMANDS>\nsingularity run images/bowtie2-2.5.4.sif bowtie2 --help\n\n```\n:::\n\n:::\n\n## Sources\n- [Anaconda](https://docs.anaconda.com/anaconda/pkg-docs/) for searching Mamba/conda packages\n- [Bioconda](https://bioconda.github.io) for installing software package related to biomedical research \n- [Conda cheat sheet](https://docs.conda.io/projects/conda/en/latest/user-guide/cheatsheet.html)\n- [faircookbook worflows](https://faircookbook.elixir-europe.org/content/recipes/applied-examples/fair-workflows.html)\n- [Docker](https://www.docker.com/)\n- [Docker get-started](https://docs.docker.com/get-started/)\n- [The turing way - reproducible research](https://the-turing-way.netlify.app/reproducible-research)\n\nFind pre-built singularity images: \n\n- [depot.galaxyproject.org](https://depot.galaxyproject.org/singularity/)\n- [Sylabs](https://cloud.sylabs.io/)\n\nOther training resources: [The turing way - reproducible research](https://book.the-turing-way.org/reproducible-research/) and [HPC intro by Cambridge](https://cambiotraining.github.io/hpc-intro)","srcMarkdownNoYaml":"\n\n## FAIR environments \n\nRecording and sharing the computational environment is essential for reproducibility and transparency. There are several methods to achieve this, but we are going to focus on two of them, mamba (an environment manager) and Docker (a container). Environment managers are user-friendly, easy to share across different systems, and offer lightweight, efficient, and fast start-up times. However, Docker containers provide complete environment isolation (including the operating system), which ensures consistent behavior across various systems.\n\nEach computer or HPC (High-Performance Computing) platform has a unique computational environment that includes its operating system, installed software, versions of software packages, and other features. If a research project is moved to a different computer or platform, the analysis might not run or produce consistent results if it depends on any of these factors.\n\nFor research to be reproducible, the original computational environment must be recorded so others can replicate it. There are several methods to achieve this: \n\n- **Containerization platforms** (e.g., Docker, Singularity): allow the researcher to package their software and dependencies into a standardized container image.\n- **Virtual Machines** (e.g., VirtualBox): can share an entire virtualized computing environment (OS, software and dependencies)\n- **Environment managers**: provide an isolated environment with specific packages and dependencies that can be installed without affecting the system-wide configuration. These environments are particularly useful for managing conflicting dependencies and ensuring reproducibility. Configuration files can automate the setup of the computational environment: \n  - conda or mamba: allows users to export environment specifications (software and dependencies) to YAML files enabling easy recreation of the environment on another system\n  - Python `virtualenv` or `pipenv`: is a tool for creating isolated environments to manage dependencies specific to a project\n  - requirements.txt: may contain commands for installing packages (such as pip for Python packages or apt-get for system-level dependencies), configuring system settings, and setting environment variables. Package managers can be used to install, upgrade and manage packages. \n  - R's `renv`: The 'renv' package creates isolated environments in R.\n- **Environment descriptors**\n  - `sessionInfo()` or `devtools::session_info()`: In R, these functions provide detailed information about the current session\n  - `sessionInfo()`, similarly, in Python. Libraries like NumPy and Pandas have `show_versions()` methods to display package versions.\n\nWhile environment managers are very easy to use and share across different systems, and are lightweight and efficient, offering fast start-up times, Docker containers provide a full env isolation (including the operating system) which ensures consistent behavior across different systems. Check the table below for a full overview. \n\n![](./images/envs.png)\n\n### Package manager \n\n[Mamba](https://mamba.readthedocs.io/en/latest/) is a reimplementation of the Conda package manager in C++. While our focus will be on Mamba, it's important to note that it maintains compatibility with Conda by using the same command-line parser, package installation and uninstallation code, and transaction verification routines.\n\nMamba uses software installation specifications that are maintained by extensive communities of developers, organized into channels, which serve as software repositories. For example, the “bioconda” channel specializes in bioinformatics tools, while “conda-forge” covers a broad range of data science packages.\n\n:::{.callout-tip title=\"Mamba vs. conda\"}\nAs previously mentioned, mamba is a newer and faster implementation. The two commands can be used interchangeable (for most tasks). If you use Conda, you should still complete the exercises, as you'll gain experience with both tools. For more information on their ecosystem and advantages [here](https://medium.com/@QuantStack/open-software-packaging-for-science-61cecee7fc23). \n:::\n\nMamba allows you to create mutluple software envrinoments, where mutluple pacjage version can co-ecit on your system. \n\n:::{.callout-exercise}\n# Build your mamba environment\nFollow [mamba instructions](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html) to install it. Let's also include `bioconda` and `conda-forge` channels which will come very handy. \n\n```{.bash .code-overflow-wrap}\nconda config --add channels defaults; conda config --add channels bioconda; conda config --add channels conda-forge\n```\nNow you are set to create your first environment. Follow these steps:\n\n1. Create a new environment named myenv\n2. Install the following packages in `myenv`: `bowtie2`, `numpy=1.26.4`, `matplotlib=3.8.3`\n3. Check the environments available \n4. Load/activate the environment\n5. Check which `python` executable is being used and that bowtie2 is installed. \n\n:::{.callout-hint}\nHere are some of the commands you need for the exercise. \n\n```{.bash}\nmamba create <ENV-NAME>\nmamba install --channel <CHANNEL-NAME> --name <ENV-NAME>\nmamba env list\nmamba activate <ENV-NAME>\n```\n:::\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\n\n1. The syntax to create a new environment is: `mamba create --name myenv`\n2. Example “bowtie2”: Go to anaconda.org and search for “bowtie2” to confirm it is available through Mamba and which software channel it is provided from. You will find that it is available via the “bioconda” channel: https://anaconda.org/bioconda/bowtie2. The syntax to install packages is: `mamba install --channel <CHANNEL-NAME> --name <ENV-NAME> <SOFTWARE-NAME>`\n\n`mamba install --name myenv --channel bioconda bowtie2=2.5.3 \"matplotlib=3.8.3\" \"numpy=1.26.4\"` \n\nDo the same with the others. \n3. To see al environments available `mamba env list`. There will be a \"*\" showi8ng the one is activated. \n4. Load the environment `mamba activate myenv`. \n5. `which python` -> should print the one in the environment that is active (path similar to `/home/mambaforge/envs/myenv/bin/python`). `bowtie2 --help`\n:::\n:::\n\n\n:::{.callout-important}\n# Loading mamba environments in shell scripts\nIf you need to activate an environment in a shell script that will be submitted to SLURM, you must first source Mamba's configuration file. For instance, to load the `myenv` environment we created, the script would include the following code:\n\n```{.bash}\n# Always add these two commands to your scripts\neval \"$(conda shell.bash hook)\"\nsource $CONDA_PREFIX/etc/profile.d/mamba.sh\n\n# then you can activate the environment\nmamba activate myenv\n```\n\nWhen jobs are submitted to SLURM, they run in a non-interactive shell where Mamba isn't automatically set up. By running the `source` command, you ensure that Mamba's activate function is available. It's important to remember that even if the environment is loaded on the login node, the scripts will execute on a different machine (one of the compute nodes). Therefore, always include the command to load the Mamba environment in your SLURM submission scripts.\n:::\n\n### Containers\n\nEssentially, a container is a self-contained, lightweight package that includes everything needed to run a specific application—such as the operating system, libraries, and the application code itself. Containers operate independently of the host system, which allows them to run the same software across various environments without any conflicts or interference. This isolation ensures that researchers can consistently execute their code on different systems and platforms, without worrying about dependency issues or conflicts with other software on the host machine.\n \n:::{.callout-note title=\"Docker vs. Singularity\"}\nThe most significant difference is at the permission level required to run them. Docker containers operate as root by default, giving them full access to the host system. While this can be useful in certain situations, it also poses security risks, especially in multi-user environments. In contrast, Singularity containers run as non-root users by default, enhancing security and preventing unauthorized access to the host system. \n\n- Docker is ideal for building and distributing software across different operating systems\n- Singularity is designed for HPC environments and offers high performance without needing root access\n:::\n\n#### Docker\n\nDocker helps developers build, share, run, and verify applications anywhere — without tedious environment configuration or management.\n\n#### Singularity on a remote server\n\nWhile you can build your own Singularity images, many popular software packages already have pre-built images available from public repositories. The two repositories you’ll most likely use or hear about are:  \n\n- [depot.galaxyproject.org](https://depot.galaxyproject.org/singularity/)\n- [Sylabs](https://cloud.sylabs.io/)\n\n\n:::{.callout-tip}\n- We recommend using the pre-installed version provided by your system administrators if you're working on a shared system. If you're working on your own computer, you can install the necessary software using Mamba.\n- They might host different versions of the same software, so it's worth checking both to find the version you need.\n- To download a software container from public repositories, use the `singularity pull` command.\n- To execute a command within the software container, use the `singularity run` command.\n- Good practice: create a directory to save all singularity images together. `.sif` is the standard extension for the images. \n:::\n\n:::{.callout-exercise}\nDownload a singularity image from one of the two repositories listed above (choose a software like bcftools, bedtools, bowtie2, seqkit...) and run the `--help` command. This command displays the help documentation of the program, verifying that our image is functioning correctly and includes the intended software.\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\n\n```{.bash .code-overflow-wrap}\n# create a directory for our singularity images\nmkdir images\n\n# download the image\nsingularity pull images/bowtie2-2.5.4.sif https://depot.galaxyproject.org/singularity/bowtie2%3A2.5.4--he20e202_2\n\n# run the image: singularity run <PATH-TO-IMAGE> <YOUR COMMANDS>\nsingularity run images/bowtie2-2.5.4.sif bowtie2 --help\n\n```\n:::\n\n:::\n\n## Sources\n- [Anaconda](https://docs.anaconda.com/anaconda/pkg-docs/) for searching Mamba/conda packages\n- [Bioconda](https://bioconda.github.io) for installing software package related to biomedical research \n- [Conda cheat sheet](https://docs.conda.io/projects/conda/en/latest/user-guide/cheatsheet.html)\n- [faircookbook worflows](https://faircookbook.elixir-europe.org/content/recipes/applied-examples/fair-workflows.html)\n- [Docker](https://www.docker.com/)\n- [Docker get-started](https://docs.docker.com/get-started/)\n- [The turing way - reproducible research](https://the-turing-way.netlify.app/reproducible-research)\n\nFind pre-built singularity images: \n\n- [depot.galaxyproject.org](https://depot.galaxyproject.org/singularity/)\n- [Sylabs](https://cloud.sylabs.io/)\n\nOther training resources: [The turing way - reproducible research](https://book.the-turing-way.org/reproducible-research/) and [HPC intro by Cambridge](https://cambiotraining.github.io/hpc-intro)"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../css/custom-callout.lua"],"toc":false,"css":["../include/webex.css"],"include-after-body":["../include/webex.js"],"output-file":"fair_envs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","copyright":"CC-BY-SA 4.0 license","theme":{"light":["materia","../css/materialight.scss"],"dark":"darkly"},"date-modified":"last-modified","summary":"workflow"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}