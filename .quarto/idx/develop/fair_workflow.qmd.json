{"title":"FAIR computational pipelines","markdown":{"yaml":{"title":"FAIR computational pipelines","format":{"html":{"toc":false}},"date-modified":"last-modified","date-format":"long","summary":"workflow"},"headingText":"Why avoid using a shell script?","containsRefs":false,"markdown":"\n\n:::{.callout-note title=\"Course Overview\"}\n- 👨‍💻 **Target Audience:** PAnyone interested in workflow management systems and software enviroments. \n- 👩‍🎓 **Level:** Advanced.\n- 🔒 **License:** [Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.](https://creativecommons.org/licenses/by-sa/4.0/legalcode)  \n- 💰 **Funding:** This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).\n:::\n\nData analysis typically involves the use of different tools, algorithms, and scripts. It often requires multiple steps to transform, filter, aggregate, and visualize data. The process can be time-consuming because each tool may demand specific inputs and parameter settings. As analyses become more complex, the importance of reproducible and scalable automated workflow management increases since the key for reproducibility is **automation**. \n\nBash scripts have been widely used for automation in the past and can handle many tasks effectively. Typically, running a bash script requires just one command, which executes all the steps in the script. However, a significant drawback is that it re-runs all steps every time. This can be problematic in certain situations.\n\n:::{.callout-exercise}\n# Exercise 1. \nConsider scenarios where re-running all steps can be an issue (minimum 2).\n\n:::{.callout-hint}\nHere are some examples: \n\n- **Changing input files**: if only some parts of the pipeline are affected by the changes.\n- **Code bugs**: Issues such as incorrect paths or typos in your code.\n- **Software updates**: newer version released. \n- **Parameter updates**: test/update parameters in a software tool.\n- **Script Modifications**: For example, if only the plotting section of your script is updated, re-running the entire pipeline could waste significant time and resources.\n:::\n:::\n\n#### Are notebooks better than bash scripts?\nNotebooks might represent an advancement in addressing this issue because they allow you to run individual cells separately. However, this process is manual, and you need to ensure that the cells are executed in the correct order (time-consuming). In practice, it’s easy to make mistakes, and thus, reproducibility is only guaranteed if you run all the cells systematically from top to bottom. This approach can be time-consuming and requires careful management to avoid errors.\n\n:::{.callout-exercise}\n# Exercise 2: What are the notebooks advantages and disadvantages in the following situations?\n1. If your pipeline consist of 100 commands\n2. If your pipeline is only 4 steps but each takes several weeks of computational time \n3. Benchmarking and testing parameters of new software\n\n:::{.callout-hint}\nMain disadvantage: reproducibility! If you are running block cells by hand, it will be hard to reproduce. \n\n1. \n  - Advantages:\n    - can check intermediate outputs and execute incrementally. \n    - user-friendly interface for visualizing and debugging. \n  - Disadvantages: \n    - less efficient for large number of commands compared to bash scripts. \n    - can become cumbersome and slow intensive code blocks. \n    - no automation features and lack of advanced version control.\n2. \n  - Advantages:\n    - simplified interface for quick execution and visualization. \n    - easier to manage and understand fewer steps.\n    - great for prototyping and testing small workflows. \n  - Disadvantages:\n    - less straightforward automation.\n3. \n  - Advantages:\n    - facilitates experimentation and visualizes results instantly. \n    - easy documentation. \n    - enables step-by-step execution and modification of parameters.\n  - Disadvantages:\n    - not efficient for extensive benchmarking. \n    - tracking and managing multiple parameters can become complex. \n:::\n\n:::\n\n#### Workflows crown the stack, making bash scripts and notebooks less attractive\n\nWorkflows propose a third option, which is very attractive for computations that are too big to be handled conveniently by scripts or notebooks. A workflow manager, is a suitable computer program that decides which task and when is run. Workflow management encompasses tasks such as parallelization, resumption, logging, and data provenance. \n\n**One single command** should trigger all necessary steps, ensuring they run in the correct sequence (simple and easy!). Workflows are divided into separate tasks, with each task reading an input and writing an output. A given task needs to be re-run only when its code or input data have changed. Using workflow managers, you ensure:\n\n- automation\n- convenience\n- portability\n- reproducibility \n- scalability\n- readable\n\nPopular workflow management systems such as Snakemake, Nextflow, and Galaxy can be scaled effortlessly across server, cluster, and cloud environments without altering the workflow definition. They also allow for specifying the necessary software, ensuring the workflows can be deployed in any setting.  It's important to select a workflow manager that best fits each research project. Therefore, we will provide two sections: one on Snakemake and one on Nextflow, so you can make the best selection for your needs.\n\n##### **Resource management**\n\nA key service offered by workflow managers is resource management, essential for executing large computations. They handle parallel execution, running tasks tasks simultaneously when they do not depend on each other and can execute a single parallelized task on multiple nodes in a computing cluster. Workflow managers also handle data storage, managing local files, shared filesystems (storage system within a server), and cloud storage. Additionally, they can manage software environments by interfacing with package managers and running tasks in dedicated containers.\n\nDuring this module, you will learn about:\n\n- **Syntax**: understand the syntax of two workflow languages.\n- **Defining steps**: how to define a step in each of the language (rule in Snakemake, process in Nextflow), including specifying input, outputs and execution statements.\n- **Generalizing steps**: explore how to generalise steps and create a chain of dependency across multiple steps using wildcards (Snakemake) or parameters and channel operators (Nextflow).\n- **Advanced Customisation**: gain knowledge of advanced pipeline customisation using configuration files and custom-made functions\n- **Scaling workflows**: understand how to scale workflows to compute servers and clusters while adapting to hardware-specific constraints.With multiple CPUs available, you can leverage parallel execution for groups of tasks that are independent of each other. In this context, tasks do not rely on the outputs of other tasks in the same group. Since data is transferred between tasks using files, it is easy to see how tasks depend on each other (dependencies).\n\nTo put this into practice, you will start by scaling up a data analysis from one dataset to a large number of datasets and incorporating additional analysis steps at the aggregate level.However, before you can scale up, the first step involves converting a notebook into a shell script that chains several computational tasks (`Exercise 3`). This script will serve as an intermediate stage before you move on to using Snakemake and Nextflow, and completing it will help you understand how different tasks correspond and are split in these tools.\n\n:::{.callout-exercise}\n# Exercise 3: notebook -> shell script \nConsider each task as a Python script that containing the code from one or more cells of a Jupyter Notebook. The key aspect of these tasks is that all data exchange occurs via files. Ideally, a task should be neither too lengthy nor too brief. In a workflow, a task is executed in its entirety or not at all. Long-running tasks can undermine one of the primary advantages of workflows, which is to execute only the necessary computations. Conversely, there is overhead associated with starting a task, reading input files, and writing output files. If the computational work performed by a task is too minimal, this overhead can become disproportionately large.\n\nWe will use the classic `Iris dataset` for this exercise. Convert [this Jupyter notebook](./scripts/01.iris.ipynb) to a shell script. \n\n:::{.callout-hint}\n1. Reuse as much as possible from the code above but remove code for displaying tables or plotting figures.  \n2. Leave only comments specifically for the code, create a README.md for the description of the dataset and the objective of the project.\n2. Save the python code to a file (e.g. [process_iris.py](./scripts/process_iris.py or [summaryStats_species.py](develop/scripts/summaryStats_species.py))). \n3. Write a shell script and run the python script once for one of the species (e.g.\"setosa\" | \"versicolor\" | \"virginica\"). \n:::\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\nHere is one possible approach. You may choose to split the notebook into more or fewer tasks as needed. Remember to make your script executable by running `chmod +x run_iris_analysis.sh` so that you can run it by simply `./run_iris_analysis.sh`.\n\nThe reason for splitting the tasks is based on their functionality. We handle plotting and data manipulation or preprocessing in one script, as these tasks are typically performed together. The summary statistics, however, might need to be generated multiple times or for different species. Therefore, we created a separate script specifically for summarizing the data. This separation allows us to run the summary script as needed, either once, multiple times, or for different species, while keeping the data processing and plotting tasks contained in their own script.\n\n```.bash\n#!/bin/bash\n\npython process_iris.py\n\nSPECIES_NAME=\"setosa\"\npython summaryStats_species.py $SPECIES_NAME\n```\n:::\n\n:::\n\n## Good practices\nIf you develop your own software make sure you follow FAIR principles. We highly endorse following these [FAIR recommendations](https://fair-software.nl/endorse). \n\n- Remember to create portable code and use relative paths to ensure transferability between users. \n- Use [git repositories](https://hds-sandbox.github.io/RDM_NGS_course/develop/05_VC.html) to save your projects and pipelines. \n- Register and publish your scientific computational workflow on [WorkflowHub](https://workflowhub.eu/). \n\n## Sources\n\n- [Snakemake tutorial](https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html#tutorial)\n- [Snakemake tutorial slides by Johannes Koster](https://slides.com/johanneskoester/snakemake-tutorial)\n- https://bioconda.github.io\n- Köster, Johannes and Rahmann, Sven. \"Snakemake - A scalable bioinformatics workflow engine\". Bioinformatics 2012.\n- Köster, Johannes. \"Parallelization, Scalability, and Reproducibility in Next-Generation Sequencing Analysis\", PhD thesis, TU Dortmund 2014.\n- [faircookbook worflows](https://faircookbook.elixir-europe.org/content/recipes/applied-examples/fair-workflows.html)\n- [The turing way - reproducible research](https://the-turing-way.netlify.app/reproducible-research)\n","srcMarkdownNoYaml":"\n\n:::{.callout-note title=\"Course Overview\"}\n- 👨‍💻 **Target Audience:** PAnyone interested in workflow management systems and software enviroments. \n- 👩‍🎓 **Level:** Advanced.\n- 🔒 **License:** [Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.](https://creativecommons.org/licenses/by-sa/4.0/legalcode)  \n- 💰 **Funding:** This project was funded by the Novo Nordisk Fonden (NNF20OC0063268).\n:::\n\nData analysis typically involves the use of different tools, algorithms, and scripts. It often requires multiple steps to transform, filter, aggregate, and visualize data. The process can be time-consuming because each tool may demand specific inputs and parameter settings. As analyses become more complex, the importance of reproducible and scalable automated workflow management increases since the key for reproducibility is **automation**. \n\n####  Why avoid using a shell script? \nBash scripts have been widely used for automation in the past and can handle many tasks effectively. Typically, running a bash script requires just one command, which executes all the steps in the script. However, a significant drawback is that it re-runs all steps every time. This can be problematic in certain situations.\n\n:::{.callout-exercise}\n# Exercise 1. \nConsider scenarios where re-running all steps can be an issue (minimum 2).\n\n:::{.callout-hint}\nHere are some examples: \n\n- **Changing input files**: if only some parts of the pipeline are affected by the changes.\n- **Code bugs**: Issues such as incorrect paths or typos in your code.\n- **Software updates**: newer version released. \n- **Parameter updates**: test/update parameters in a software tool.\n- **Script Modifications**: For example, if only the plotting section of your script is updated, re-running the entire pipeline could waste significant time and resources.\n:::\n:::\n\n#### Are notebooks better than bash scripts?\nNotebooks might represent an advancement in addressing this issue because they allow you to run individual cells separately. However, this process is manual, and you need to ensure that the cells are executed in the correct order (time-consuming). In practice, it’s easy to make mistakes, and thus, reproducibility is only guaranteed if you run all the cells systematically from top to bottom. This approach can be time-consuming and requires careful management to avoid errors.\n\n:::{.callout-exercise}\n# Exercise 2: What are the notebooks advantages and disadvantages in the following situations?\n1. If your pipeline consist of 100 commands\n2. If your pipeline is only 4 steps but each takes several weeks of computational time \n3. Benchmarking and testing parameters of new software\n\n:::{.callout-hint}\nMain disadvantage: reproducibility! If you are running block cells by hand, it will be hard to reproduce. \n\n1. \n  - Advantages:\n    - can check intermediate outputs and execute incrementally. \n    - user-friendly interface for visualizing and debugging. \n  - Disadvantages: \n    - less efficient for large number of commands compared to bash scripts. \n    - can become cumbersome and slow intensive code blocks. \n    - no automation features and lack of advanced version control.\n2. \n  - Advantages:\n    - simplified interface for quick execution and visualization. \n    - easier to manage and understand fewer steps.\n    - great for prototyping and testing small workflows. \n  - Disadvantages:\n    - less straightforward automation.\n3. \n  - Advantages:\n    - facilitates experimentation and visualizes results instantly. \n    - easy documentation. \n    - enables step-by-step execution and modification of parameters.\n  - Disadvantages:\n    - not efficient for extensive benchmarking. \n    - tracking and managing multiple parameters can become complex. \n:::\n\n:::\n\n#### Workflows crown the stack, making bash scripts and notebooks less attractive\n\nWorkflows propose a third option, which is very attractive for computations that are too big to be handled conveniently by scripts or notebooks. A workflow manager, is a suitable computer program that decides which task and when is run. Workflow management encompasses tasks such as parallelization, resumption, logging, and data provenance. \n\n**One single command** should trigger all necessary steps, ensuring they run in the correct sequence (simple and easy!). Workflows are divided into separate tasks, with each task reading an input and writing an output. A given task needs to be re-run only when its code or input data have changed. Using workflow managers, you ensure:\n\n- automation\n- convenience\n- portability\n- reproducibility \n- scalability\n- readable\n\nPopular workflow management systems such as Snakemake, Nextflow, and Galaxy can be scaled effortlessly across server, cluster, and cloud environments without altering the workflow definition. They also allow for specifying the necessary software, ensuring the workflows can be deployed in any setting.  It's important to select a workflow manager that best fits each research project. Therefore, we will provide two sections: one on Snakemake and one on Nextflow, so you can make the best selection for your needs.\n\n##### **Resource management**\n\nA key service offered by workflow managers is resource management, essential for executing large computations. They handle parallel execution, running tasks tasks simultaneously when they do not depend on each other and can execute a single parallelized task on multiple nodes in a computing cluster. Workflow managers also handle data storage, managing local files, shared filesystems (storage system within a server), and cloud storage. Additionally, they can manage software environments by interfacing with package managers and running tasks in dedicated containers.\n\nDuring this module, you will learn about:\n\n- **Syntax**: understand the syntax of two workflow languages.\n- **Defining steps**: how to define a step in each of the language (rule in Snakemake, process in Nextflow), including specifying input, outputs and execution statements.\n- **Generalizing steps**: explore how to generalise steps and create a chain of dependency across multiple steps using wildcards (Snakemake) or parameters and channel operators (Nextflow).\n- **Advanced Customisation**: gain knowledge of advanced pipeline customisation using configuration files and custom-made functions\n- **Scaling workflows**: understand how to scale workflows to compute servers and clusters while adapting to hardware-specific constraints.With multiple CPUs available, you can leverage parallel execution for groups of tasks that are independent of each other. In this context, tasks do not rely on the outputs of other tasks in the same group. Since data is transferred between tasks using files, it is easy to see how tasks depend on each other (dependencies).\n\nTo put this into practice, you will start by scaling up a data analysis from one dataset to a large number of datasets and incorporating additional analysis steps at the aggregate level.However, before you can scale up, the first step involves converting a notebook into a shell script that chains several computational tasks (`Exercise 3`). This script will serve as an intermediate stage before you move on to using Snakemake and Nextflow, and completing it will help you understand how different tasks correspond and are split in these tools.\n\n:::{.callout-exercise}\n# Exercise 3: notebook -> shell script \nConsider each task as a Python script that containing the code from one or more cells of a Jupyter Notebook. The key aspect of these tasks is that all data exchange occurs via files. Ideally, a task should be neither too lengthy nor too brief. In a workflow, a task is executed in its entirety or not at all. Long-running tasks can undermine one of the primary advantages of workflows, which is to execute only the necessary computations. Conversely, there is overhead associated with starting a task, reading input files, and writing output files. If the computational work performed by a task is too minimal, this overhead can become disproportionately large.\n\nWe will use the classic `Iris dataset` for this exercise. Convert [this Jupyter notebook](./scripts/01.iris.ipynb) to a shell script. \n\n:::{.callout-hint}\n1. Reuse as much as possible from the code above but remove code for displaying tables or plotting figures.  \n2. Leave only comments specifically for the code, create a README.md for the description of the dataset and the objective of the project.\n2. Save the python code to a file (e.g. [process_iris.py](./scripts/process_iris.py or [summaryStats_species.py](develop/scripts/summaryStats_species.py))). \n3. Write a shell script and run the python script once for one of the species (e.g.\"setosa\" | \"versicolor\" | \"virginica\"). \n:::\n\n:::{.callout-tip title=\"Solution\" collapse=\"true\"}\nHere is one possible approach. You may choose to split the notebook into more or fewer tasks as needed. Remember to make your script executable by running `chmod +x run_iris_analysis.sh` so that you can run it by simply `./run_iris_analysis.sh`.\n\nThe reason for splitting the tasks is based on their functionality. We handle plotting and data manipulation or preprocessing in one script, as these tasks are typically performed together. The summary statistics, however, might need to be generated multiple times or for different species. Therefore, we created a separate script specifically for summarizing the data. This separation allows us to run the summary script as needed, either once, multiple times, or for different species, while keeping the data processing and plotting tasks contained in their own script.\n\n```.bash\n#!/bin/bash\n\npython process_iris.py\n\nSPECIES_NAME=\"setosa\"\npython summaryStats_species.py $SPECIES_NAME\n```\n:::\n\n:::\n\n## Good practices\nIf you develop your own software make sure you follow FAIR principles. We highly endorse following these [FAIR recommendations](https://fair-software.nl/endorse). \n\n- Remember to create portable code and use relative paths to ensure transferability between users. \n- Use [git repositories](https://hds-sandbox.github.io/RDM_NGS_course/develop/05_VC.html) to save your projects and pipelines. \n- Register and publish your scientific computational workflow on [WorkflowHub](https://workflowhub.eu/). \n\n## Sources\n\n- [Snakemake tutorial](https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html#tutorial)\n- [Snakemake tutorial slides by Johannes Koster](https://slides.com/johanneskoester/snakemake-tutorial)\n- https://bioconda.github.io\n- Köster, Johannes and Rahmann, Sven. \"Snakemake - A scalable bioinformatics workflow engine\". Bioinformatics 2012.\n- Köster, Johannes. \"Parallelization, Scalability, and Reproducibility in Next-Generation Sequencing Analysis\", PhD thesis, TU Dortmund 2014.\n- [faircookbook worflows](https://faircookbook.elixir-europe.org/content/recipes/applied-examples/fair-workflows.html)\n- [The turing way - reproducible research](https://the-turing-way.netlify.app/reproducible-research)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../css/custom-callout.lua"],"toc":false,"css":["../include/webex.css"],"include-after-body":["../include/webex.js"],"output-file":"fair_workflow.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","copyright":"CC-BY-SA 4.0 license","theme":{"light":["materia","../css/materialight.scss"],"dark":"darkly"},"title":"FAIR computational pipelines","date-modified":"last-modified","date-format":"long","summary":"workflow"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}