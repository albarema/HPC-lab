---
title: Exercises
format: 
  html:
    toc: false
date-modified: last-modified
date-format: long
summary: intro to workflows
---

```{r, echo = FALSE, results='asis'}
library(webexercises)

knitr::opts_chunk$set(echo = FALSE)

# Uncomment to change widget colours:
style_widgets(incorrect = "red", correct = "green", highlight = "firebrick")
```

Put your learning to the test with what youâ€™ve covered so far.

## General HPC pipes 
**1. What role does a workflow manager play in computational research??**

```{r}
#| echo: false
opts_1 <- c(
   answer="Automating the execution of complex computational processes",
   "To manually execute each step of a computation",
   "Offering real-time and intuitive data analysis",
   "To minimize the reliance on specific software environments"
)
```

`r longmcq(opts_1)`

**2.What is the primary drawback of using shell scripts for automating computations?**

```{r}
#| echo: false
opts_2 <- c(
   answer="Limited error handling and debugging capabilities",
   "Difficulty in integrating with notebooks",
   "Not compatible with all operating systems",
   answer="They re-run all the steps every time",
   "Insufficient support for parallel processing",
   "Complex and extensive coding for simple tasks"
)
```

`r longmcq(opts_2)`


**3. What are the key features of workflow manager in computational research?**
(Several possible solutions)

```{r}
#| echo: false
opts_3 <- c(
   answer="Executing tasks only when required",
   answer = "Managing task dependencies",
   answer = "Overseeing storage and resource allocation",
   "Providing intuitive graphical interfaces"
)
```

`r longmcq(opts_3)`

**4. Workflow managers can run tasks (different) concurrently if there are no dependencies** (True or False) `r torf(TRUE)`

**5. A workflow manager can execute a single parallelized task on multiple nodes in a computing cluster** (True or False) `r torf(TRUE)`

## Snakemake

:::{.callout-exercise}
# Exercise 1S: Exploring Rule Invocation in Snakemake
:::
In this exercise, we will explore how rules are invoked in a Snakemake workflow. Download the `Snakefile` and data required for this exercise using the links below. 

{{< downloadthis ./scripts/samples_1kgp_test.tsv label="Download data input" class="small-button" dname="samples_1kgp">}}
{{< downloadthis ./scripts/process_1kgp.smk label="Download Snakefile" class="small-button" dname="process_1kgp">}}

Now follow these steps and answer the questions: 

- Open the snakefile, named `process_1kgp.smk` and try to understand every single line. **If you request Snakemake to generate the file `results/all_female.txt`, what commands will be executed and in what sequence?**
- Dry run the workflow: Check the number of jobs that will be executed.

   **6. How many jobs will Snakemake run?** `r fitb(8)`

- Run the workflow: Use the name flag `--snakefile` | `-s` follow by the name of the file. 
- Verify output: Ensure that the output files are in your working directory.
- Clean Up: remove all files starting with `EUR` in your results folder.
- Rerun the workflow: Execute the Snakefile again.

   **7. How many jobs did Snakemake run in this last execution?** `r fitb(3)`

- Remove lines 4-6 in the `process_1kgp.smk`. How else can you run the workflow but to generate instead `all_male.txt` using only the command-line? 

   ```
   rule all:
      input:
         expand("results/all_{gender}.txt", gender=["female"])
   ```
   
   **8. Tip: what is missing at the end of the command ( e.g. what should be added to ensure `all_male.txt` is generated)? `snakemake -s process_1kgp.smk -c1`** `r fitb("results/all_male.txt")`


:::{.callout-hint}
```{.bash}
# dry run 
snakemake -s process_1kgp.smk -n 
# run the workflow 
snakemake -s process_1kgp.smk-c1 <name_rule|name_output>
# verify output 
ls <name_output>
# remove file belonging to european individuals 
rm results/EUR.tsv results/all_female.txt
# rerun again 
snakemake -s process_1kgp.smk -c1 <name_rule|name_output>
```
:::

